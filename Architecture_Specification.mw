This page contains information relating to the OpenRISC 1000 architecture and the specification document.
= OpenRISC 1000 architecture 1.1 =

* Adds support for l.lwa and l.swa atomic operations

== Download OR1K 1.1 Specification ==

Architecture specification document: [http://opencores.org/websvn,filedetails?repname=openrisc&path=%2Fopenrisc%2Ftrunk%2Fdocs%2Fopenrisc-arch-1.1-rev0.pdf PDF]

= OpenRISC 1000 architecture 1.0 =

This is the first update to OR1K architecture for many years. It addresses architectural and documentation issues in the manual. A summary of the main features follows:

* jump/branch delay slot is now optional
* improved version tracking
* relocatable exception vector space
* correction of arithmetic overflow and carry detection
* improvements to MAC and integer multiply behaviour
* various clarifications regarding hardware and software behaviour

See the [[Architecture Specification 1.0 Changes Summary]] page for a more extensive summary and list of suggested updates for implementations. See table 1-2 in [http://opencores.org/websvn,filedetails?repname=openrisc&path=%2Fopenrisc%2Ftrunk%2Fdocs%2Fopenrisc-arch-1.0-rev0.pdf the manual] for a full list.

== Download OR1K 1.0 Specification ==

Architecture specification document: [http://opencores.org/websvn,filedetails?repname=openrisc&path=%2Fopenrisc%2Ftrunk%2Fdocs%2Fopenrisc-arch-1.0-rev0.pdf PDF]

== Old specifications ==

These documents are archived. For now it's just the "original" spec, it can be downloaded below:

Old Architecture manual (April 2006): [http://opencores.org/websvn,filedetails?repname=openrisc&path=%2Fopenrisc%2Ftrunk%2Fdocs%2Farchive%2Fopenrisc_arch.pdf PDF]

= Proposed changes =

This section is to keep track of proposed alterations to the OpenRISC 1000.

Feel free to add ideas and comment (please sign your name.) It also helps to post to the [[OR1K:Community_Portal#Mailing_lists|mailing list]] outlining your proposal.

The spec update process will occur from time to time and all proposals largely agreed to by the community will make it in.

The current working copy of accepted proposals for architecture version 1.2 can be found [https://github.com/openrisc/doc/blob/arch-1.2-proposal/openrisc-arch-1.2-rev0.odt here].

== Core Identifier and Number of Cores ==

To enable multicore systems, a Special Purpose Register 'Core ID' is needed. Although it is principally not necessary, but allows for a self-contained solution, I furthermore propose a 'Number of Cores' register, which contains the number of cores in a SMP cluster.

Proposal: Use system status register address space 128+ for multicore specifics. I think there may further things come up, so that it may make sense to reserve some space.

This is already in mor1kx..

Therefore, in table on page 24 add:

 Grp #: 0
 Reg #: 128
 Reg Name: COREID
 USER MODE: -
 SUPV MODE: R
 Description: Core Identifier Register

 Grp #: 0
 Reg #: 129
 Reg Name: NUMCORES
 USER MODE: -
 SUPV MODE: R
 Description: Number of Cores Register

Add 4.12, explaining those.


== Optional user-mode support ==

As some processors designed for embedded applications won't necessarily run software with a user/supervisor-mode split of operation, it's not necessary for them to implement user-mode features (eg. protect from unprivileged access to SPRs and the like.) Obviously this lack of support for user mode should be indicated via a bit in the CPUCFGR. So I propose a bit is added so that implementations without user-mode support can be detected by software which requires user-mode.

''Comment:'' I think this is maybe too much of generalization. Except there is a specific plan to also implement a core without it, I don't think we should over-complicate the spec. [[User:Wallento|Wallento]] 11:51, 3 March 2015 (CET)

== SPR access updates ==

There has been a discussion about different SPRs and the possibility to access them from user space.

The topic can be split in two aspects: Defining privileges on instruction and defining the behavior for insufficient privileges.

=== SPR privileges ===

See current mailing list discussions.

=== Accessing SPRs with insufficient privileges ===

At present there is no comment on what should happen in the event that l.mtspr/l.mfspr are used on SPRs which require supervisor mode to access, or if l.rfe is used in user mode.

There are currently two proposals for handling this:

The first is to leave the behavior in these cases implementation defined or completely undefined.  If this option is chosen, the manual should be changed to state this explicitly.

The first proposal (by Julius) is for a l.mtspr (write to an SPR) requiring write in supervisor mode while in user mode makes that instruction equivalent to an l.nop. Also that l.mfspr (read from an SPR) with insufficient privileges returns 0, just like an unimplemented SPR would.

The second proposal, by firefalcon and pgavin, is that we keep in line with other ISAs and make the ISA fully virtualizable by throwing an exception in this case.

Some elaboration by pgavin: I think we should actually *use* the definition of "privileged" as given on page 15 of the manual (section 1.6).  It is defined, but never used in the manual, from what I've found.  Additionally, I think we should raise an exception whenever a privileged instruction has been executed while in user mode.  For example, the l.rfe instruction should always raise this exception when executed in user mode.  Additionally, in user mode, an attempt to read or write an SPR that is not permitted as indicated on Table 4-2 of the manual should raise this exception.  An instruction that accesses a privileged resource in user mode should raise a privileged instruction exception.  We can either reuse the current illegal instruction for this purpose, or add a new exception type.

l.rfe should always be privileged.  It seems to me that allowing this instruction from user mode makes little sense, and could, in fact, be dangerous.  l.mtspr would be privileged whenever the address does not have a W in the "user mode" column of table 4-2, and l.mfspr would be privileged whenever the address does not have an R in that column.  The descriptions for these instructions would need to be changed to indicate that they may cause exceptions; it currently says that they do not.

Incidentally, some bits in the SR register (F, CY, OV) are not accessible from user mode, and so these bits should be mirrored in a separate SPR that is R/W from user mode.  Or alternatively, we could add new instructions to read/write them.

Also incidentally, I also think l.mtspr/l.mfspr on an unimplemented register should raise an illegal instruction exception.  The presence of SPRs that are optional should be indicated by a bit in the UPR, and so this should be checked prior to accessing them.  If some registers are not covered by presence bits, the bits should be added.  However, the behavior currently defined by the standard is not a problem for virtualization, as far as I can tell, provided that l.mtspr/l.mfspr behave identically on unimplemented registers whether in user or supervisor mode.

== l.lw assembly mnemonic ==

Add the l.lw assembly mnemonic, which encodes as a l.lwz instruction.

The l.lwz definition page in the spec should have:

 Format:
 l.lwz rD,I(rA)
 
 or
 
 l.lw rD,I(rA)

''Commentary:'' The downside of this is that it is potentially confusing in a 64-bit implementation, where you want to be explicit about sign extension. If we do go down this route, then for consistency, we should also have l.lh and l.lb as synonyms for l.lhz and l.lbz. [[User:Jeremybennett|Jeremybennett]] 11:32, 16 May 2012 (CEST)

rdiez: For the 32-bit architecture, in order to reduce confusion it would be best to remove the l.lws opcode, and remove the l.lws and l.lwz mnemonics, then add an "l.lw" mnemonic which maps to the old l.lwz opcode. or1200 hasn't implemented (or didn't implement) the l.lws opcode for a long time anyway. By the way, l.extws and l.extwz should also be marked as obsolete, as l.ori can achieve the same results. For the 64-bit architecture, l.lw shouldn't be a valid mnemonic, so the programmer must think whether he wants the l.lwz or the l.lws behaviour.

== Instruction Classes ==

At present, there are class I and II instructions. Class I must always be implemented. Class II may be optionally implemented.

There are a few problems with the current scheme.

# There is no register where class II instructions are indicated as present or not
# Some fundamental instructions, such as compare-and-set-flag-against-immediate (<code>l.sf*i</code>) are class II and should really be I
# Software multi-lib support with such a configurable instruction set is difficult

Reorganising these will make it clearer which functionality should be tested and expected to be present in an implementation. It will also make it easier for software libraries to be prepared for a particular combination of supported instructions.

=== Current ORBIS32 Class II instructions ===

As of revision 0 of the specification, the following are marked as ORBIS32 class II:

* l.cmov
* l.csync
* l.cust1-8
* l.div*
* l.ext[bhw]*
* l.ff1
* l.fl1
* l.mac*,l.msb
* l.mul*
* l.psync
* l.ror,l.rori
* l.sf*i (l.sfeqi,l.sfgesi etc.)
* l.trap

==== Proposed ORBIS Classifications ====

Class I should remain mandatory to implement.

A new classification is proposed:

* Class II - Optional Maths: l.div*, l.mul* (in OR1200 on Virtex 5, serial l.div, full mult costs 265FF, 550LUT - respectively 71FF, 173LUT and 194FF, 377 LUT)
* Class III - Optional Bit Manipulation: l.ext[bwh]*, l.ff1, l.fl1, l.ror, l.rori (in OR1200 on Virtex 5 they cost 183 LUT)
* Class IV - MAC Instructions - l.mac*, l.msb
* Class V - Remaining Optional Instructions: l.cmov, l.csync, l.msync, l.psync, l.cust1-8

Classes II-IV will be all-or-nothing support classes, with class V individually implementable.

l.sf*i and l.trap should be made class I.

==== Presence bits ====

Presence bits in a new register should be added for classes II-IV, with a bit for each instruction in class V.

The CPUCFGR should be extended beyond bit 9 to contain:
 
 [25] l.cust1 instruction supported
 [24] l.cust2 instruction supported
 [23] l.cust3 instruction supported
 [22] l.cust4 instruction supported
 [21] l.cust5 instruction supported
 [20] l.cust6 instruction supported
 [19] l.cust7 instruction supported
 [18] l.cust8 instruction supported
 [17] l.cmov instruction supported
 [16] l.csync instruction supported
 [15] l.msync instruction supported
 [14] l.psync instruction supported
 [13] Class IV instruction supported
 [12] Class IV instruction supported
 [11] Class III instruction supported
 [10] Class II instruction supported

== Work in Progress ==

Remove "1.4 Work in Progress". Reason: The architecture revision should be stable and the remaining parts are essentially community stuff, not for the spec.

== Typos, Clarifications ==

The following section should be used to list proposed typos and clarifications which need to be made to future revisions of the architecture spec document.

=== Misspellings, Typos ===

* <s>''Synchronization'' is misspelled as ''Syncronization'' on pages 44, 82, 92, 284, and 340.</s> (fixed in proposal, [[User:Wallento|Wallento]] 11:35, 3 March 2015 (CET))

* <s>In Table 4-7 on page 31, "EEA" label should be "ESR".</s> (fixed in proposal, [[User:Wallento|Wallento]] 11:35, 3 March 2015 (CET))

* <s>At present the fixed-one bit in the supervision register (<tt>SR[FO]</tt>) is listed as readable ''and'' writable. It should be listed as readable only.</s> (fixed in proposal, [[User:Wallento|Wallento]] 11:37, 3 March 2015 (CET))

* Move the section about GPRs from the NPC section (4.10, page 31) into its own section. Better explain how GPRs from other contexts are accessed (section 6.4.3, page 257).

* <s>PPC should be read-only (table 4-2, page 24).</s> (fixed in proposal, [[User:Wallento|Wallento]] 11:58, 3 March 2015 (CET))

* For backwards compatibility, the AECR register (section 15.14, page 326) should be initialized to a state that has behavior identical to a machine without AECR support, instead of the current "0".  I believe this would be the value (OVADDE|OVMULE|OVMACADDE).

* ESR (section 4.9, page 30) should have the same bit layout as SR0.

* <s>There exist a typo in the name of l.msbu. The current name is "Multiply and Subtract Signed" but it should be "Multiply and Subtract Unsigned".</s> (fixed in proposal, [[User:Wallento|Wallento]] 13:01, 3 March 2015 (CET))

* <s>There exist a typo in the format of l.ff1 and l.fl1. They both include the rB register, even though it is not part of the instruction.</s> (fixed in proposal, [[User:Wallento|Wallento]] 13:01, 3 March 2015 (CET))

<s>
Format:

 before: l.ff1 rD,rA,rB
 after:  l.ff1 rD,rA

 before: l.fl1 rD,rA,rB
 after:  l.fl1 rD,rA
</s>

* <s>There exist a typo in the bit representation of l.ff1 and l.fl1. They both include the rB register, even though it is not part of the instruction.</s> (fixed in proposal, [[User:Wallento|Wallento]] 13:01, 3 March 2015 (CET))

<s>
Format: l.ff1 rD,rA
 bits before: 111000DDDDDAAAAABBBBB-00----1111
 bits after:  111000DDDDDAAAAA------00----1111

Format: l.fl1 rD,rA
 bits before: 111000DDDDDAAAAABBBBB-01----1111
 bits after:  111000DDDDDAAAAA------01----1111
</s>

* <s>There exist a typo in the bit representation of l.muld and l.muldu. They both include the rD register, even though it is not part of the instruction.</s> (fixed in proposal, [[User:Wallento|Wallento]] 13:01, 3 March 2015 (CET))

<s>
Format: l.muld rA,rB
 bits before: 111000DDDDDAAAAABBBBB-11----0111
 bits after:  111000-----AAAAABBBBB-11----0111

Format: l.muldu rA,rB
 bits before: 111000DDDDDAAAAABBBBB-11----1100
 bits after:  111000-----AAAAABBBBB-11----1100
</s>

==== Cache Registers Marked as Optional ====

From [http://bugzilla.opencores.org/show_bug.cgi?id=79 bug #79].

Changes to the spec document to make it clearer which cache control registers are optional.

Mark the following registers as optional to implement, as they have a "present" bit in the I/DCCFGR:

* Data Cache Control Register
* Instruction Cache Control Register
* Data Cache Block Write-Back Register

Instruction and data block invalidate and data block flush registers are mandatory, and their presence bits in the I/DCCFGR should be marked as always '1'.

=== Consistency ===

The following section should be used to list proposed consistency issues that should be discussed for future revisions of the architecture specification document. This may refer to naming conventions but also more trivial matters such as use of whitespace and formatting.

==== Operand representations ====

Currently there exist 16 different variations of operand representations for
instructions (excluding l.custN instructions) in the OpenRISC 1000 architecture
specification.

Some of these variations have identical or very similar meaning. For instance
the variation which has a destination register (rD), source register (rA) and an
immediate value (I, K or L).

From a consistency stand point it would be nice if all of these instructions
agreed on using the same letter to represent an immediate value.

For instance why should the opperand representation of l.andi and l.ori differ
from the opperand representation of l.xori?

 Format: l.andi rD,rA,K
 Format: l.ori rD,rA,K

 Format: l.xori rD,rA,I

The goal is to reach a consensus on how to make the operand representations
consistent. Which letter should be used for immediate values (I, K, L or N) and
which register name should be used in the various cases.

The following page contains a list of all instructions arranged by their operand representations:
http://opencores.org/or1k/Operand_representation

==== Naming conventions ====

The naming of l.addi and l.addic are not consistent with the naming of l.andi, l.ori and l.xori.

Currently there exist three naming patterns.

* Instructions which always take halfword immediate values and thus make them implicit in the name and the mnemonic.

 l.addi: Add Immediate
 l.addic: Add Immediate and Carry

* Instructions which always take halfword immediate values but still makes them explicit in the name, although implicit in the mnemonic.

 l.andi: And with Immediate Half Word
 l.ori: Or with Immediate Half Word
 l.xori: Exclusive Or with Immediate Half Word

* Related instructions which handle values of varying size and thus make them explicit in the name and the mnemonic.

 l.lbs: Load Byte and Extend with Sign
 l.lhs: Load Half Word and Extend with Sign
 l.lws: Load Single Word and Extend with Sign

==== Whitespace ====

To be consistent with l.add and l.addc an empty new line should be inserted between the two paragraphs in the description of l.addi and l.addic.

= Previous proposals =

The suggestions which were accepted, in one form or another, into the 1.0 release of the architecture specification can be found here: [[Architecture_Specification_1.0_proposals]].
